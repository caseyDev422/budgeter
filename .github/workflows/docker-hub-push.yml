name: Build and Deploy

on:
  push:
    branches:
      - main # Adjust this to the branch you want to trigger the action

jobs:
  build_db:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check if db/ directory has changed
        id: db_changed
        run: |
          git diff-tree --name-only --no-commit-id ORIG_HEAD HEAD | grep -q '^db/'
        continue-on-error: true

      - name: Build and push database Docker image
        if: steps.db_changed.outcome == 'success'  # Only execute if db/ directory has changed
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          cd db  # Navigate to the db directory where the Dockerfile is located
          docker build -t seancasey94/budgeter/db:latest .
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push seancasey94/budgeter/db:latest

  build_client:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and push client Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker build -t seancasey94/budgeter/client:latest ./client
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push seancasey94/budgeter/client:latest

  build_server:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and push server Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker build -t seancasey94/budgeter/server:latest ./server
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push push seancasey94/budgeter/server:latest

  deploy_client:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy client to AKS client pod
        run: |
          # Add your deployment steps here for deploying the client to S3 and invalidating CloudFront cache

  deploy_server:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy server to AKS server pod
        run: |
          # Add your deployment steps here for deploying the server to AWS ECS
